import '../../models/contrat/contrat.dart'; // ModÃ¨le reprÃ©sentant un contrat
import '../../models/gestion/payment.dart'; // ModÃ¨le reprÃ©sentant un paiement
import '../../models/user/user.dart'; // ModÃ¨le reprÃ©sentant un utilisateur (locataire ou propriÃ©taire)

abstract class ContractNetworkService {

  // =============================
  // ğŸ”¹ 1. RÃ‰CUPÃ‰RER TOUS LES CONTRATS
  // =============================
  // Retourne une liste de tous les contrats disponibles
  Future<List<Contract>> getContracts();

  // =============================
  // ğŸ”¹ 2. OBTENIR LES DÃ‰TAILS Dâ€™UN CONTRAT
  // =============================
  // RÃ©cupÃ¨re les informations dÃ©taillÃ©es dâ€™un contrat spÃ©cifique selon son ID
  Future<Contract> getContractDetails(int id);

  // =============================
  // ğŸ”¹ 3. CRÃ‰ER UN NOUVEAU CONTRAT
  // =============================
  // Envoie les donnÃ©es dâ€™un nouveau contrat pour le crÃ©er sur le serveur
  Future<Contract> createContract(Map<String, dynamic> data);

  // =============================
  // ğŸ”¹ 4. METTRE Ã€ JOUR UN CONTRAT EXISTANT
  // =============================
  // Met Ã  jour un contrat existant avec de nouvelles donnÃ©es
  Future<Contract> updateContract(int id, Map<String, dynamic> data);

  // =============================
  // ğŸ”¹ 5. SUPPRIMER UN CONTRAT
  // =============================
  // Supprime un contrat spÃ©cifique du systÃ¨me Ã  partir de son ID
  Future<void> deleteContract(int id);

  // =============================
  // ğŸ”¹ 6. RÃ‰CUPÃ‰RER LA LISTE DES LOCATAIRES
  // =============================
  // RÃ©cupÃ¨re tous les locataires (users) enregistrÃ©s
  Future<List<User>> getTenants();

  // =============================
  // ğŸ”¹ 7. EFFECTUER UN PAIEMENT
  // =============================
  // Envoie les donnÃ©es dâ€™un paiement (montant, contrat, date, etc.) pour lâ€™enregistrer
  Future<Payment> makePayment(Map<String, dynamic> paymentData);

  // =============================
  // ğŸ”¹ 8. RÃ‰CUPÃ‰RER LES PAIEMENTS Dâ€™UN CONTRAT
  // =============================
  // RÃ©cupÃ¨re la liste des paiements associÃ©s Ã  un contrat donnÃ©
  Future<List<Payment>> getContractPayments(int contractId);

  // =============================
  // ğŸ”¹ 9. PAYER LA CAUTION (DÃ‰PÃ”T)
  // =============================
  // Lance lâ€™initiation de paiement de dÃ©pÃ´t et retourne la rÃ©ponse brute (peut contenir checkoutUrl)
  Future<Map<String, dynamic>> payDeposit({required int contractId, required double amount, required String paymentMethod});
}
