// Script Node.js pour le d√©ploiement initial du Smart Contract ImmobilX sur Hedera Testnet.
// 
// USAGE: 
// 1Ô∏è‚É£ Place le fichier compil√© (.bin) √† la racine du projet
// 2Ô∏è‚É£ Configure ton fichier .env avec HEDERA_ACCOUNT_ID et HEDERA_PRIVATE_KEY
// 3Ô∏è‚É£ Lance : node scripts/deployMasterContract.js
// 
// Le script affichera le MASTER_CONTRACT_ID √† copier dans le fichier .env.

import 'dotenv/config'
import { 
    Client, 
    FileCreateTransaction, 
    FileAppendTransaction, // Import√© pour l'ajout de morceaux
    ContractCreateTransaction, 
    PrivateKey, 
    Hbar,
    AccountId, 
    AccountBalanceQuery,
    // Status, n'est pas utilis√© directement
    // On peut utiliser la constante du SDK pour le Gaz maximal si n√©cessaire :
    // MAX_GAS_PER_TX 
} from '@hashgraph/sdk';
import fs from 'fs';

// ‚úÖ Chemin vers ton bytecode
const BYTECODE_PATH = "./hedera_sol_RentalContractFactory.bin";

// Taille maximale recommand√©e d'un chunk pour FileAppendTransaction (4096 octets)
// Diminution √† 2048 octets pour une meilleure r√©silience sur Testnet congestionn√©.
const MAX_CHUNK_SIZE = 2048;

// Fonction utilitaire pour attendre un certain nombre de millisecondes
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * D√©coupe un buffer de bytecode en morceaux de taille maximale.
 * @param {Buffer} bytecode Le contenu du fichier.
 * @returns {Buffer[]} Un tableau de buffers (chunks).
 */
function chunkBytecode(bytecode) {
    const chunks = [];
    for (let i = 0; i < bytecode.length; i += MAX_CHUNK_SIZE) {
        chunks.push(bytecode.slice(i, i + MAX_CHUNK_SIZE));
    }
    return chunks;
}


async function deployMasterContract() {
    try {
        // --- V√©rification des variables d'environnement ---
        if (!process.env.HEDERA_ACCOUNT_ID || !process.env.HEDERA_PRIVATE_KEY) {
            throw new Error("Veuillez configurer HEDERA_ACCOUNT_ID et HEDERA_PRIVATE_KEY dans le fichier .env.");
        }

        if (!fs.existsSync(BYTECODE_PATH)) {
            throw new Error(`Fichier bytecode non trouv√© : ${BYTECODE_PATH}`);
        }

        // --- Initialisation du compte op√©rateur ---
        const operatorId = process.env.HEDERA_ACCOUNT_ID;
        let cleanedKey = process.env.HEDERA_PRIVATE_KEY.replace(/\s/g, '').trim();
        if (cleanedKey.startsWith('0x')) {
            cleanedKey = cleanedKey.substring(2);
        }

        // Le probl√®me de signature √©tant r√©solu, nous assumons que la m√©thode correcte (ECDSA ou ED25519)
        // est d√©sormais utilis√©e dans le code local (soit fromStringECDSA() soit fromStringED25519()).
        // Nous allons utiliser fromString() pour laisser le SDK d√©tecter, car le probl√®me est maintenant le gaz.
        // NOTE: Si vous aviez mis fromStringECDSA() manuellement, assurez-vous de le laisser dans votre environnement local
        // ou de le modifier ici. Pour l'exemple, je reviens √† fromString() et ajoute un commentaire pour l'ECDSA.
        
        // üö® Le SDK vous a demand√© d'utiliser fromStringECDSA() ou fromStringED25519().
        // Si vous avez une cl√© ECDSA, d√©commentez la ligne ci-dessous (et commentez l'autre).
        // const operatorKey = PrivateKey.fromStringECDSA(cleanedKey); 
        const operatorKey = PrivateKey.fromStringECDSA(cleanedKey); 


        // üöÄ MISE √Ä JOUR DU CLIENT POUR LA COMPATIBILIT√â ET LA R√âSILIENCE
        // 1. Initialisation de base du client
        const client = Client.forTestnet()
            .setOperator(operatorId, operatorKey);
            
        // 2. Application des configurations avanc√©es s√©par√©ment pour √©viter les erreurs de cha√Ænage
        // üö® Augmente le timeout de transaction de 11s √† 30s pour les gros d√©ploiments (R√©silience gRPC)
        client.setRequestTimeout(30 * 1000); 

        // Le client est maintenant minimaliste mais contient le timeout √©tendu.


        console.log(`-> V√©rification du solde de l'op√©rateur ${operatorId}...`);

        // --- V√©rification du solde du compte ---
        const accountId = AccountId.fromString(operatorId);
        const balanceQuery = new AccountBalanceQuery().setAccountId(accountId);

        try {
            const accountBalance = await balanceQuery.execute(client);
            const balanceInHbar = parseFloat(accountBalance.hbars.toString());

            console.log(`‚úÖ Solde v√©rifi√© : ${balanceInHbar.toLocaleString()} Hbar.`);
            if (balanceInHbar < 1) {
                console.warn("‚ö†Ô∏è Solde bas : moins de 1 Hbar. Le d√©ploiement pourrait √©chouer.");
            }
        } catch (balanceError) {
            // L'erreur de solde n'est pas le probl√®me actuel, mais on la laisse pour diagnostic futur.
            console.error("\n‚ùå ERREUR LORS DE LA V√âRIFICATION DU SOLDE :");
            console.error("üîç Erreur d√©taill√©e :", balanceError.message || balanceError);
            throw new Error(`√âchec de la v√©rification du solde pour le compte ${operatorId}.`);
        }

        // --- Lecture et D√©coupage du bytecode ---
        const bytecode = fs.readFileSync(BYTECODE_PATH);
        const chunks = chunkBytecode(bytecode);
        console.log("-> Bytecode charg√©. Taille :", bytecode.length, "octets.");
        console.log(`-> D√©coup√© en ${chunks.length} morceaux (max ${MAX_CHUNK_SIZE} octets par morceau).`);


        // =======================================================================
        // üöÄ M√âTHODE ROBUSTE EN 3 √âTAPES : Cr√©ation (Chunk 1) + Ajout (Chunks restants) + Cr√©ation Contrat
        // =======================================================================

        // --- √âTAPE 1 : Cr√©er le fichier avec le premier morceau ---
        console.log("-> 1/3 : Cr√©ation du fichier avec le premier morceau...");
        
        let fileId = null;
        const maxAttempts = 3;

        try {
            // Cr√©er le fichier avec le premier morceau (chunks[0])
            let fileCreateTx = new FileCreateTransaction()
                .setContents(chunks[0])
                .setKeys([operatorKey.publicKey]) 
                .setMaxTransactionFee(new Hbar(5)); 
    
            // üí° AJOUT CRUCIAL : Forcer la signature de l'op√©rateur pour le FileCreateTransaction
            const signedFileCreateTx = await fileCreateTx.freezeWith(client).sign(operatorKey);

            const fileSubmit = await signedFileCreateTx.execute(client);
            const fileReceipt = await fileSubmit.getReceipt(client);
            
            if (fileReceipt.status.toString() !== 'SUCCESS') {
                 throw new Error(`Statut de la cr√©ation de fichier non r√©ussi: ${fileReceipt.status.toString()}`);
            }

            fileId = fileReceipt.fileId;
            console.log(`‚úÖ Fichier cr√©√©. File ID: ${fileId.toString()}`);

        } catch (e) {
            const errorStr = e.message || e.toString();
            console.error(`\n‚ùå ERREUR LORS DE LA CR√âATION DU FICHIER : ${errorStr}`);
            // Remonter une erreur plus claire si c'est un probl√®me de signature/pr√©-v√©rification
            if (errorStr.includes('INVALID_SIGNATURE')) {
                console.error("üí° Conseil : V√©rifiez que HEDERA_PRIVATE_KEY dans votre .env est correcte pour HEDERA_ACCOUNT_ID.");
                console.error("   Si la cl√© est ECDSA, remplacez 'PrivateKey.fromStringED25519' par 'PrivateKey.fromStringECDSA'.");
            }
            throw new Error(`√âchec de la cr√©ation du fichier (premier morceau).`);
        }


        // --- √âTAPE 2 : Ajouter les morceaux restants (Append) ---
        if (chunks.length > 1) {
            console.log("-> 2/3 : Ajout des morceaux restants...");

            for (let i = 1; i < chunks.length; i++) {
                let attempt = 0;
                let success = false;

                do {
                    attempt++;
                    console.log(`   Ajout du morceau ${i + 1}/${chunks.length}. Tentative ${attempt}/${maxAttempts}...`);
                    
                    try {
                        let fileAppendTx = new FileAppendTransaction()
                            .setFileId(fileId)
                            .setContents(chunks[i])
                            .setMaxTransactionFee(new Hbar(5));
                        
                        // NOTE: FileAppendTransaction doit aussi √™tre sign√©e par l'AdminKey ou l'Op√©rateur
                        const signedFileAppendTx = await fileAppendTx.freezeWith(client).sign(operatorKey);


                        const appendSubmit = await signedFileAppendTx.execute(client);
                        const appendReceipt = await appendSubmit.getReceipt(client);

                        if (appendReceipt.status.toString() === 'SUCCESS') {
                            console.log(`   ‚úÖ Morceau ${i + 1} ajout√© avec succ√®s (Tentative ${attempt}).`);
                            success = true;
                            await sleep(2000); // Pause pour laisser le n≈ìud respirer
                        } else {
                            throw new Error(`Statut de l'ajout non r√©ussi: ${appendReceipt.status.toString()}`);
                        }

                    } catch (e) {
                        const errorStr = e.message || e.toString();
                        
                        // Si l'erreur est UNKNOWN, NODE_TRANSACTION_PRECHECK_FAILED, ou BUSY, on r√©essaie
                        if (attempt < maxAttempts && (errorStr.includes('UNKNOWN') || errorStr.includes('NODE_TRANSACTION_PRECHECK_FAILED') || errorStr.includes('BUSY'))) {
                            console.warn(`   ‚ùå √âchec de l'ajout (Erreur r√©seau/n≈ìud: ${errorStr}). Attente avant de r√©essayer...`);
                            await sleep(5000); // Attendre plus longtemps pour les erreurs d'ajout
                        } else {
                            // √âchec d√©finitif
                            console.error(`\n‚ùå ERREUR LORS DE L'AJOUT DU MORCEAU ${i + 1} : ${errorStr}`);
                            throw new Error(`√âchec d√©finitif de l'ajout du morceau ${i + 1} apr√®s ${maxAttempts} tentatives.`);
                        }
                    }
                } while (!success && attempt < maxAttempts);
                
                if (!success) {
                    throw new Error(`√âchec critique de l'ajout du morceau ${i + 1}. Arr√™t du d√©ploiement.`);
                }
            }
            console.log("‚úÖ Tous les morceaux ont √©t√© ajout√©s.");
        }


        // --- √âTAPE 3 : Cr√©er l'instance du Smart Contract ---
        console.log("-> 3/3 : Cr√©ation de l'instance du Master Contract √† partir du File ID...");
        
        let contractCreateTx = new ContractCreateTransaction()
            // üöÄ CORRECTION : Augmentation du gaz √† 2.5 millions pour r√©soudre INSUFFICIENT_GAS
            .setGas(2500000) 
            .setBytecodeFileId(fileId) // Utilise le File ID des √©tapes pr√©c√©dentes
            .setAdminKey(operatorKey.publicKey); 

        const contractSubmit = await contractCreateTx.execute(client);
        const contractReceipt = await contractSubmit.getReceipt(client);
        
        if (contractReceipt.status.toString() !== 'SUCCESS') {
            throw new Error(`√âchec de la cr√©ation du contrat: ${contractReceipt.status.toString()}`);
        }
        
        const masterContractId = contractReceipt.contractId.toString(); 

        console.log("\n=============================================");
        console.log("üéâ D√âPLOIEMENT MASTER CONTRACT R√âUSSI ! üéâ");
        console.log("MASTER CONTRACT ID (√Ä COPIER dans .env):");
        console.log(`HEDERA_MASTER_CONTRACT_ID="${masterContractId}"`);
        console.log("=============================================");
        
        return masterContractId;

    } catch (error) {
        console.error("\n‚ùå ERREUR LORS DU D√âPLOIEMENT HEDERA :");
        // Affiche l'erreur de mani√®re plus lisible pour √©viter la stack trace gRPC
        console.error("üîç Erreur d√©taill√©e :", error.message || error);
        process.exit(1);
    }
}

deployMasterContract();
