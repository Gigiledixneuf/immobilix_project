import '../../models/gestion/application.dart';
import '../../models/gestion/property.dart';

// DÃ©finition de l'interface (classe abstraite) pour le service de rÃ©seau des propriÃ©tÃ©s.
// Cette interface dÃ©finit le contrat (les mÃ©thodes) que toute implÃ©mentation du service
// de propriÃ©tÃ©s doit respecter.
abstract class PropertyNetworkService {

  // =============================
  // ðŸ”¹ 1. OBTENIR LES DÃ‰TAILS Dâ€™UNE PROPRIÃ‰TÃ‰
  // =============================
  // RÃ©cupÃ¨re une seule propriÃ©tÃ© en utilisant son identifiant (ID).
  // Doit retourner un Future qui complÃ¨te avec un objet Property.
  Future<Property> getProperty(int id);

  // =============================
  // ðŸ”¹ 2. RÃ‰CUPÃ‰RER TOUTES LES PROPRIÃ‰TÃ‰S
  // =============================
  // RÃ©cupÃ¨re une liste de toutes les propriÃ©tÃ©s disponibles.
  // Doit retourner un Future qui complÃ¨te avec une liste d'objets Property.
  Future<List<Property>> getProperties();

  // =============================
  // ðŸ”¹ 2bis. RÃ‰CUPÃ‰RER LES PROPRIÃ‰TÃ‰S PUBLIQUES (option disponible)
  // =============================
  Future<List<Property>> getPublicProperties({bool availableOnly});

  // =============================
  // ðŸ”¹ 3. CRÃ‰ER UNE NOUVELLE PROPRIÃ‰TÃ‰
  // =============================
  // CrÃ©e une nouvelle propriÃ©tÃ© en envoyant ses donnÃ©es.
  // 'data' est une Map contenant les champs de la nouvelle propriÃ©tÃ©.
  // Doit retourner un Future qui complÃ¨te avec l'objet Property crÃ©Ã© (souvent avec un nouvel ID).
  Future<Property> createProperty(Map<String, dynamic> data);

  // =============================
  // ðŸ”¹ 4. POSTULER Ã€ UNE PROPRIÃ‰TÃ‰ (APPLY)
  // =============================
  Future<void> applyToProperty({required int propertyId, String? message});

  // =============================
  // ðŸ”¹ 5. LISTER LES CANDIDATURES Dâ€™UNE PROPRIÃ‰TÃ‰ (BAILLEUR)
  // =============================
  Future<List<ApplicationModel>> getApplicationsForProperty({required int propertyId});

  // Accepter / Refuser une candidature
  Future<ApplicationModel> acceptApplication({required int applicationId});
  Future<ApplicationModel> rejectApplication({required int applicationId});

  // CrÃ©er un contrat depuis une candidature (MVP)
  Future<Map<String, dynamic>> createContractFromApplication({required int applicationId});
}